// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shuffull.Shared;

namespace Shuffull.Shared.Migrations
{
    [DbContext(typeof(ShuffullContext))]
    [Migration("20231104110808_TagReform")]
    partial class TagReform
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32");

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.LocalSessionData", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ActivelyDownload")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CurrentPlaylistId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.ToTable("LocalSessionData");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.RecentlyPlayedSong", b =>
                {
                    b.Property<string>("RecentlyPlayedSongGuid")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastPlayed")
                        .HasColumnType("TEXT");

                    b.Property<long>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimestampSeconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("RecentlyPlayedSongGuid");

                    b.HasIndex("SongId");

                    b.HasIndex("TimestampSeconds");

                    b.ToTable("RecentlyPlayedSongs");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Requests.Request", b =>
                {
                    b.Property<string>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RequestType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeRequested")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("Requests");

                    b.HasDiscriminator<string>("RequestName").HasValue("Request");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.Artist", b =>
                {
                    b.Property<long>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.Playlist", b =>
                {
                    b.Property<long>("PlaylistId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CurrentSongId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PercentUntilReplayable")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.PlaylistSong", b =>
                {
                    b.Property<long>("PlaylistSongId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlaylistId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SongId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlaylistSongId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId");

                    b.ToTable("PlaylistSongs");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.Song", b =>
                {
                    b.Property<long>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SongId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.SongArtist", b =>
                {
                    b.Property<long>("SongArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SongId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SongArtistId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongId");

                    b.ToTable("SongArtists");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.SongTag", b =>
                {
                    b.Property<long>("SongTagId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SongTagId");

                    b.HasIndex("SongId");

                    b.HasIndex("TagId");

                    b.ToTable("SongTags");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.Tag", b =>
                {
                    b.Property<long>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.User", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.UserSong", b =>
                {
                    b.Property<long>("UserSongId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastPlayed")
                        .HasColumnType("TEXT");

                    b.Property<long>("SongId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserSongId");

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSongs");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Requests.GetPlaylistsRequest", b =>
                {
                    b.HasBaseType("Shuffull.Shared.Networking.Models.Requests.Request");

                    b.HasDiscriminator().HasValue("UpdatePlaylists");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Requests.UpdateSongLastPlayedRequest", b =>
                {
                    b.HasBaseType("Shuffull.Shared.Networking.Models.Requests.Request");

                    b.Property<DateTime>("LastPlayed")
                        .HasColumnType("TEXT");

                    b.Property<long>("SongId")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("UpdateSongLastPlayed");
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.RecentlyPlayedSong", b =>
                {
                    b.HasOne("Shuffull.Shared.Networking.Models.Server.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.Playlist", b =>
                {
                    b.HasOne("Shuffull.Shared.Networking.Models.Server.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.PlaylistSong", b =>
                {
                    b.HasOne("Shuffull.Shared.Networking.Models.Server.Playlist", "Playlist")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shuffull.Shared.Networking.Models.Server.Song", "Song")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.SongArtist", b =>
                {
                    b.HasOne("Shuffull.Shared.Networking.Models.Server.Artist", "Artist")
                        .WithMany("SongArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shuffull.Shared.Networking.Models.Server.Song", "Song")
                        .WithMany("SongArtists")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.SongTag", b =>
                {
                    b.HasOne("Shuffull.Shared.Networking.Models.Server.Song", "Song")
                        .WithMany("SongTags")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shuffull.Shared.Networking.Models.Server.Tag", "Tag")
                        .WithMany("SongTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shuffull.Shared.Networking.Models.Server.UserSong", b =>
                {
                    b.HasOne("Shuffull.Shared.Networking.Models.Server.Song", "Song")
                        .WithMany("UserSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shuffull.Shared.Networking.Models.Server.User", "User")
                        .WithMany("UserSongs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
